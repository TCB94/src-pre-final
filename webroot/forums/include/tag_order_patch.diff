101a102,108
> 	
> 	$temp_text = false;
> 	if (empty($errors))
> 		$temp_text = preparse_tags($text, $errors, $is_signature);
> 		
> 	if ($temp_text !== false)
> 		$text = $temp_text;
505a513,925
> }
> 
> function preparse_tags($text, &$errors, $is_signature = false)
> {
> 	global $lang_common, $pun_config;
> 
> 	// Start off by making some arrays of bbcode tags and what we need to do with each one
> 
> 	// List of all the tags
> 	$tags = array('quote', 'code', 'b', 'i', 'u', 's', 'ins', 'del', 'em', 'color', 'colour', 'url', 'email', 'img', 'list', '*', 'h', 'topic', 'post', 'forum', 'user', 'scratchblocks');
> 	// List of tags that we need to check are open (You could not put b,i,u in here then illegal nesting like [b][i][/b][/i] would be allowed)
> 	$tags_opened = $tags;
> 	// and tags we need to check are closed (the same as above, added it just in case)
> 	$tags_closed = $tags;
> 	// Tags we can nest and the depth they can be nested to
> 	$tags_nested = array('quote' => $pun_config['o_quote_depth'], 'list' => 5, '*' => 5);
> 	// Tags to ignore the contents of completely (just code)
> 	$tags_ignore = array('code');
> 	// Block tags, block tags can only go within another block tag, they cannot be in a normal tag
> 	$tags_block = array('quote', 'code', 'list', 'h', '*');
> 	// Inline tags, we do not allow new lines in these
> 	$tags_inline = array('b', 'i', 'u', 's', 'ins', 'del', 'em', 'color', 'colour', 'h', 'topic', 'post', 'forum', 'user');
> 	// Tags we trim interior space
> 	$tags_trim = array('img');
> 	// Tags we remove quotes from the argument
> 	$tags_quotes = array('url', 'email', 'img', 'topic', 'post', 'forum', 'user');
> 	// Tags we limit bbcode in
> 	$tags_limit_bbcode = array(
> 		'*' 	=> array('b', 'i', 'u', 's', 'ins', 'del', 'em', 'color', 'colour', 'url', 'email', 'list', 'img', 'code', 'topic', 'post', 'forum', 'user'),
> 		'list' 	=> array('*'),
> 		'url' 	=> array('img'),
> 		'email' => array('img'),
> 		'topic' => array('img'),
> 		'post'  => array('img'),
> 		'forum' => array('img'),
> 		'user'  => array('img'),
> 		'img' 	=> array(),
> 		'h'		=> array('b', 'i', 'u', 's', 'ins', 'del', 'em', 'color', 'colour', 'url', 'email', 'topic', 'post', 'forum', 'user'),
> 	);
> 	// Tags we can automatically fix bad nesting
> 	$tags_fix = array('quote', 'b', 'i', 'u', 's', 'ins', 'del', 'em', 'color', 'colour', 'url', 'email', 'h', 'topic', 'post', 'forum', 'user');
> 
> 	$split_text = preg_split('%(\[[\*a-zA-Z0-9-/]*?(?:=.*?)?\])%', $text, -1, PREG_SPLIT_DELIM_CAPTURE|PREG_SPLIT_NO_EMPTY);
> 
> 	$open_tags = array('fluxbb-bbcode');
> 	$open_args = array('');
> 	$opened_tag = 0;
> 	$new_text = '';
> 	$current_ignore = '';
> 	$current_nest = '';
> 	$current_depth = array();
> 	$limit_bbcode = $tags;
> 	$count_ignored = array();
> 
> 	foreach ($split_text as $current)
> 	{
> 		if ($current == '')
> 			continue;
> 
> 		// Are we dealing with a tag?
> 		if (substr($current, 0, 1) != '[' || substr($current, -1, 1) != ']')
> 		{
> 			// It's not a bbcode tag so we put it on the end and continue
> 			// If we are nested too deeply don't add to the end
> 			if ($current_nest)
> 				continue;
> 
> 			$current = str_replace("\r\n", "\n", $current);
> 			$current = str_replace("\r", "\n", $current);
> 			if (in_array($open_tags[$opened_tag], $tags_inline) && strpos($current, "\n") !== false)
> 			{
> 				// Deal with new lines
> 				$split_current = preg_split('%(\n\n+)%', $current, -1, PREG_SPLIT_DELIM_CAPTURE|PREG_SPLIT_NO_EMPTY);
> 				$current = '';
> 
> 				if (!pun_trim($split_current[0], "\n")) // The first part is a linebreak so we need to handle any open tags first
> 					array_unshift($split_current, '');
> 
> 				for ($i = 1; $i < count($split_current); $i += 2)
> 				{
> 					$temp_opened = array();
> 					$temp_opened_arg = array();
> 					$temp = $split_current[$i - 1];
> 					while (!empty($open_tags))
> 					{
> 						$temp_tag = array_pop($open_tags);
> 						$temp_arg = array_pop($open_args);
> 
> 						if (in_array($temp_tag , $tags_inline))
> 						{
> 							array_push($temp_opened, $temp_tag);
> 							array_push($temp_opened_arg, $temp_arg);
> 							$temp .= '[/'.$temp_tag.']';
> 						}
> 						else
> 						{
> 							array_push($open_tags, $temp_tag);
> 							array_push($open_args, $temp_arg);
> 							break;
> 						}
> 					}
> 					$current .= $temp.$split_current[$i];
> 					$temp = '';
> 					while (!empty($temp_opened))
> 					{
> 						$temp_tag = array_pop($temp_opened);
> 						$temp_arg = array_pop($temp_opened_arg);
> 						if (empty($temp_arg))
> 							$temp .= '['.$temp_tag.']';
> 						else
> 							$temp .= '['.$temp_tag.'='.$temp_arg.']';
> 						array_push($open_tags, $temp_tag);
> 						array_push($open_args, $temp_arg);
> 					}
> 					$current .= $temp;
> 				}
> 
> 				if (array_key_exists($i - 1, $split_current))
> 					$current .= $split_current[$i - 1];
> 			}
> 
> 			if (in_array($open_tags[$opened_tag], $tags_trim))
> 				$new_text .= pun_trim($current);
> 			else
> 				$new_text .= $current;
> 
> 			continue;
> 		}
> 
> 		// Get the name of the tag
> 		$current_arg = '';
> 		if (strpos($current, '/') === 1)
> 		{
> 			$current_tag = substr($current, 2, -1);
> 		}
> 		else if (strpos($current, '=') === false)
> 		{
> 			$current_tag = substr($current, 1, -1);
> 		}
> 		else
> 		{
> 			$current_tag = substr($current, 1, strpos($current, '=')-1);
> 			$current_arg = substr($current, strpos($current, '=')+1, -1);
> 		}
> 		$current_tag = strtolower($current_tag);
> 
> 		// Is the tag defined?
> 		if (!in_array($current_tag, $tags))
> 		{
> 			// It's not a bbcode tag so we put it on the end and continue
> 			if (!$current_nest)
> 				$new_text .= $current;
> 
> 			continue;
> 		}
> 
> 		// We definitely have a bbcode tag
> 
> 		// Make the tag string lower case
> 		if ($equalpos = strpos($current,'='))
> 		{
> 			// We have an argument for the tag which we don't want to make lowercase
> 			if (strlen(substr($current, $equalpos)) == 2)
> 			{
> 				// Empty tag argument
> 				$errors[] = sprintf('[%s] tag had an empty attribute section', $current_tag);
> 				return false;
> 			}
> 			$current = strtolower(substr($current, 0, $equalpos)).substr($current, $equalpos);
> 		}
> 		else
> 			$current = strtolower($current);
> 
> 		// This is if we are currently in a tag which escapes other bbcode such as code
> 		// We keep a count of ignored bbcodes (code tags) so we can nest them, but
> 		// only balanced sets of tags can be nested
> 		if ($current_ignore)
> 		{
> 			// Increase the current ignored tags counter
> 			if ('['.$current_ignore.']' == $current)
> 				$count_ignored[$current_tag]++;
> 
> 			// Decrease the current ignored tags counter
> 			if ('[/'.$current_ignore.']' == $current)
> 				$count_ignored[$current_tag]--;
> 
> 			if ('[/'.$current_ignore.']' == $current && $count_ignored[$current_tag] == 0)
> 			{
> 				// We've finished the ignored section
> 				$current = '[/'.$current_tag.']';
> 				$current_ignore = '';
> 				$count_ignored = array();
> 			}
> 
> 			$new_text .= $current;
> 
> 			continue;
> 		}
> 
> 		if ($current_nest)
> 		{
> 			// We are currently too deeply nested so lets see if we are closing the tag or not
> 			if ($current_tag != $current_nest)
> 				continue;
> 
> 			if (substr($current, 1, 1) == '/')
> 				$current_depth[$current_nest]--;
> 			else
> 				$current_depth[$current_nest]++;
> 
> 			if ($current_depth[$current_nest] <= $tags_nested[$current_nest])
> 				$current_nest = '';
> 
> 			continue;
> 		}
> 
> 		// Check the current tag is allowed here
> 		if (!in_array($current_tag, $limit_bbcode) && $current_tag != $open_tags[$opened_tag])
> 		{
> 			$errors[] = sprintf('[%1$s] was opened within [%2$s], this is not allowed', $current_tag, $open_tags[$opened_tag]);
> 			return false;
> 		}
> 
> 		if (substr($current, 1, 1) == '/')
> 		{
> 			// This is if we are closing a tag
> 			if ($opened_tag == 0 || !in_array($current_tag, $open_tags))
> 			{
> 				// We tried to close a tag which is not open
> 				if (in_array($current_tag, $tags_opened))
> 				{
> 					$errors[] = sprintf('[/%1$s] was found without a matching [%1$s]', $current_tag);
> 					return false;
> 				}
> 			}
> 			else
> 			{
> 				// Check nesting
> 				while (true)
> 				{
> 					// Nesting is ok
> 					if ($open_tags[$opened_tag] == $current_tag)
> 					{
> 						array_pop($open_tags);
> 						array_pop($open_args);
> 						$opened_tag--;
> 						break;
> 					}
> 
> 					// Nesting isn't ok, try to fix it
> 					if (in_array($open_tags[$opened_tag], $tags_closed) && in_array($current_tag, $tags_closed))
> 					{
> 						if (in_array($current_tag, $open_tags))
> 						{
> 							$temp_opened = array();
> 							$temp_opened_arg = array();
> 							$temp = '';
> 							while (!empty($open_tags))
> 							{
> 								$temp_tag = array_pop($open_tags);
> 								$temp_arg = array_pop($open_args);
> 
> 								if (!in_array($temp_tag, $tags_fix))
> 								{
> 									// We couldn't fix nesting
> 									$errors[] = sprintf('[%1$s] was found without a matching [/%1$s]', array_pop($temp_opened));
> 									return false;
> 								}
> 								array_push($temp_opened, $temp_tag);
> 								array_push($temp_opened_arg, $temp_arg);
> 
> 								if ($temp_tag == $current_tag)
> 									break;
> 								else
> 									$temp .= '[/'.$temp_tag.']';
> 							}
> 							$current = $temp.$current;
> 							$temp = '';
> 							array_pop($temp_opened);
> 							array_pop($temp_opened_arg);
> 
> 							while (!empty($temp_opened))
> 							{
> 								$temp_tag = array_pop($temp_opened);
> 								$temp_arg = array_pop($temp_opened_arg);
> 								if (empty($temp_arg))
> 									$temp .= '['.$temp_tag.']';
> 								else
> 									$temp .= '['.$temp_tag.'='.$temp_arg.']';
> 								array_push($open_tags, $temp_tag);
> 								array_push($open_args, $temp_arg);
> 							}
> 							$current .= $temp;
> 							$opened_tag--;
> 							break;
> 						}
> 						else
> 						{
> 							// We couldn't fix nesting
> 							$errors[] = sprintf('[/%1$s] was found without a matching [%1$s]', $current_tag);
> 							return false;
> 						}
> 					}
> 					else if (in_array($open_tags[$opened_tag], $tags_closed))
> 						break;
> 					else
> 					{
> 						array_pop($open_tags);
> 						array_pop($open_args);
> 						$opened_tag--;
> 					}
> 				}
> 			}
> 
> 			if (in_array($current_tag, array_keys($tags_nested)))
> 			{
> 				if (isset($current_depth[$current_tag]))
> 					$current_depth[$current_tag]--;
> 			}
> 
> 			if (in_array($open_tags[$opened_tag], array_keys($tags_limit_bbcode)))
> 				$limit_bbcode = $tags_limit_bbcode[$open_tags[$opened_tag]];
> 			else
> 				$limit_bbcode = $tags;
> 
> 			$new_text .= $current;
> 
> 			continue;
> 		}
> 		else
> 		{
> 			// We are opening a tag
> 			if (in_array($current_tag, array_keys($tags_limit_bbcode)))
> 				$limit_bbcode = $tags_limit_bbcode[$current_tag];
> 			else
> 				$limit_bbcode = $tags;
> 
> 			if (in_array($current_tag, $tags_block) && !in_array($open_tags[$opened_tag], $tags_block) && $opened_tag != 0)
> 			{
> 				// We tried to open a block tag within a non-block tag
> 				$errors[] = sprintf('[%1$s] was opened within [%2$s], this is not allowed', $current_tag, $open_tags[$opened_tag]);
> 				return false;
> 			}
> 
> 			if (in_array($current_tag, $tags_ignore))
> 			{
> 				// It's an ignore tag so we don't need to worry about what's inside it
> 				$current_ignore = $current_tag;
> 				$count_ignored[$current_tag] = 1;
> 				$new_text .= $current;
> 				continue;
> 			}
> 
> 			// Deal with nested tags
> 			if (in_array($current_tag, $open_tags) && !in_array($current_tag, array_keys($tags_nested)))
> 			{
> 				// We nested a tag we shouldn't
> 				$errors[] = sprintf('[%s] was opened within itself, this is not allowed', $current_tag);
> 				return false;
> 			}
> 			else if (in_array($current_tag, array_keys($tags_nested)))
> 			{
> 				// We are allowed to nest this tag
> 
> 				if (isset($current_depth[$current_tag]))
> 					$current_depth[$current_tag]++;
> 				else
> 					$current_depth[$current_tag] = 1;
> 
> 				// See if we are nested too deep
> 				if ($current_depth[$current_tag] > $tags_nested[$current_tag])
> 				{
> 					$current_nest = $current_tag;
> 					continue;
> 				}
> 			}
> 
> 			// Remove quotes from arguments for certain tags
> 			if (strpos($current, '=') !== false && in_array($current_tag, $tags_quotes))
> 			{
> 				$current = preg_replace('%\['.$current_tag.'=("|\'|)(.*?)\\1\]\s*%i', '['.$current_tag.'=$2]', $current);
> 			}
> 
> 			if (in_array($current_tag, array_keys($tags_limit_bbcode)))
> 				$limit_bbcode = $tags_limit_bbcode[$current_tag];
> 
> 			$open_tags[] = $current_tag;
> 			$open_args[] = $current_arg;
> 			$opened_tag++;
> 			$new_text .= $current;
> 			continue;
> 		}
> 	}
> 
> 	// Check we closed all the tags we needed to
> 	foreach ($tags_closed as $check)
> 	{
> 		if (in_array($check, $open_tags))
> 		{
> 			// We left an important tag open
> 			$errors[] = sprintf('[%1$s] was found without a matching [/%1$s]', $check);
> 			return false;
> 		}
> 	}
> 
> 	if ($current_ignore)
> 	{
> 		// We left an ignore tag open
> 		$errors[] = sprintf('[%1$s] was found without a matching [/%1$s]', $current_ignore);
> 		return false;
> 	}
> 
> 	return $new_text;
